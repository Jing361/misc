Creating and using libraries with gnu tools
===========================================

Static archive (.a):
--------------------
Compile:
    cc -Wall -c ctest1.c ctest2.c
Package as static archive
    ar -cvq libctest.a ctest1.o ctest2.o
OR:
    ar rcs libctest.a ctest.o
list files in library (confirm): ar-t libctest.a
using library:
    cc -o <execName> main.c libctest.a
    cc -o <execName> main.c -L/path/to/library-directory -lctest

Dynamically linked (.so) shared object:
---------------------------------------
    cc -Wall -fPIC -c *.c
    cc -shared -fPIC -Wl,-soname,libctest.so.1 -o libctest.so.1.0 *.o -lc
    mv libctest.so.1.0 /usr/lib
    ln -sf /usr/lib/libctest.so.1.0 /usr/lib/libctest.so.1
    ln -sf /usr/lib/libctest.so.1.0 /usr/lib/libctest.so
    (running ldconfig -n <directory with shared libraries> may create these links as well)
    
Using 'ldd' will show shared library dependencies of a program.
If smaller, more efficient code is desired use -fpic, but -fPIC is gauranteed to work.

creates libctest.so.1.0 and links to it
first ln allows -lctest to work
second ln allows run time binding to work

compile with so s
    gcc -Wall -I/path/to/includes -L/path/to/libraries main.c -lctest -o main
use:
    gcc -Wall -L/opt/lib main.c -lctest -o main
shared library dependencies of an executable can be listed with ldd <execName>

Dynamicall Loaded (DL) Libraries
--------------------------------
Invoked during run time, good for allowing 'modules' in a program.
These libraries are created/built/installed just as the previous library types, and are invoked differently.
use:#include<dlfcn.h>
call:dlopen()
    void * dlopen(const char *filename, int flag);
both for linux and solaris only
use glib for better portability
or tools like libtdl or CORBA

MISC
----
nm lists all symbols for static or shared libraries

Resources
---------
http://www.dwheeler.com/program-library/Program-Library-HOWTO/t1.html
