Creating and using libraries with gnu tools
===========================================

Static archive (.a):
--------------------
Compile:
    cc -Wall -c ctest1.c ctest2.c
Package as static archive
    ar -cvq libctest.a ctest1.o ctest2.o
OR:
    ar rcs libctest.a ctest.o

list files in library (confirm): ar-t libctest.a

using a library:
    cc -o <execName> main.c libctest.a
    cc -o <execName> main.c -L/path/to/library/directory -lctest

Dynamically linked (.so) shared object:
---------------------------------------
//Here I actually defer to cprogramming.com
//That tutorial actually worked correctly first go.  Some of the below doesn't like to work
    cc -Wall -fPIC -c *.c
    cc -shared -fPIC -Wl,-soname,libctest.so.1 -o libctest.so.1.0 *.o -lc
    mv libctest.so.1.0 /usr/lib
    ln -sf /usr/lib/libctest.so.1.0 /usr/lib/libctest.so.1
    ln -sf /usr/lib/libctest.so.1.0 /usr/lib/libctest.so
    (running ldconfig -n <directory with shared libraries> may create these links as well)

Using 'ldd' will show shared library dependencies of a program.
If smaller, more efficient code is desired use -fpic, but -fPIC is gauranteed to work.

creates libctest.so.1.0 and links to it
first ln allows -lctest to work
second ln allows run time binding to work

compile with so s
    gcc -Wall -I/path/to/includes -L/path/to/libraries main.c -lctest -o main
use:
    gcc -Wall -L/opt/lib main.c -lctest -o main
shared library dependencies of an executable can be listed with ldd <execName>

//Tested makefile segment as:
libHelloPlugin.so:helloPlugin.o
    $(CC) -shared -o libHelloPlugin.so helloPlugin.o
helloPlugin.o:helloPlugin.cc
    $(CC) $(cflags) $(flags) -fPIC helloPlugin.cc
main:main.o libHelloPlugin.so
    $(CC) -L. -Wl,-rpath=$(PWD) main.o -o $(name) -lHelloPlugin
main.o:main.cc
    $(CC) $(cflags) $(flags) main.cc

Dynamically Loaded (DL) Libraries
--------------------------------
Invoked during run time, good for allowing 'modules' in a program.
These libraries are created/built/installed just as the previous library types, and are invoked differently.

use:#include<dlfcn.h>

call:dlopen()
    void * dlopen(const char *filename, int flag);
for linux and solaris only
use glib for better portability
or tools like libtdl or CORBA

compile as:
libHelloPlugin.so:helloPlugin.o
    $(CC) -shared -o libHelloPlugin.so helloPlugin.o

helloPlugin.o:helloPlugin.cc
    $(CC) $(cflags) $(flags) -fPIC helloPlugin.cc

main:main.o libHelloPlugin.so
    $(CC) -L. -Wl,-rpath=$(PWD) main.o -o $(name) -lHelloPlugin -ldl

main.o:main.cc
    $(CC) $(cflags) $(flags) main.cc

Or, for main dependency:
    $(CC) -L. main.o -o $(name) -lHelloPlugin
and export constant location of so library as:
    export LD_LIBRARY_PATH=$(LIBRARY_LOCATION):$(LD_LIBRARY_PATH)
this export should be done on installation of library, and possibly in bashrc or bash_profile
sample helloworld main file as:

int main(int argc, char** argv){
    typedef plugin*(*create_t)();
    typedef void(*delete_t)(plugin*);

    void* handle;
    create_t create;
    delete_t del;
    char* error;

    // obtain handle to library from dlopen
    handle = dlopen("./libHelloPlugin.so", RTLD_LAZY);

    // handle errors
    if(!handle){
        cerr << dlerror() << endl;
        return 1;
    }

    // get handle to symbol called 'create' (will be a function, not sure if can be variable)
    create = (create_t)dlsym(handle, "create");

    // handle errors
    if((error = dlerror()) != 0){
        cerr << error << endl;
        return 1;
    }

    // get handle to symbol called 'destroy'
    del = (delete_t)dlsym(handle, "destroy");

    // handle errors
    if((error = dlerror()) != 0){
        cerr << error << endl;
        return 0;
    }

    // whatever a 'plugin' is (should be defined by program, but shared with plugin/library)
    plugin *pi;

    // create, use, and destroy the plugin.  lifetime could be much longer, but this is for demonstration.
    pi = (*create)();
    pi->run();
    (*del)(pi);

    // close handle to library
    dlclose(handle);

    return 0;
}
Where "create" and "destroy" both exist in helloPlugin.cc, and create and destroy plugin objects respectively

MISC
----
nm lists all symbols for static or shared libraries

Resources
---------
http://www.dwheeler.com/program-library/Program-Library-HOWTO/t1.html
http://tldp.org/HOWTO/Program-Library-HOWTO/
http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html
http://www.cprogramming.com/tutorial/shared-libraries-linux-gcc.html

