execute_process(COMMAND git log --pretty=format:'%h' -n 1
                OUTPUT_VARIABLE GIT_REV
                ERROR_QUIET)

# Check whether we got any revision (which isn't
# always the case, e.g. when someone downloaded a zip
# file from Github instead of a checkout)
if ("${GIT_REV}" STREQUAL "")
    set(GIT_REV "N/A")
    set(GIT_DIFF "")
    set(GIT_TAG "N/A")
    set(GIT_BRANCH "N/A")
else()
    execute_process(
        COMMAND bash -c "git diff --quiet --exit-code || echo +"
        OUTPUT_VARIABLE GIT_DIFF)
    execute_process(
        COMMAND git describe --exact-match --tags
        OUTPUT_VARIABLE GIT_TAG ERROR_QUIET)
    execute_process(
        COMMAND git rev-parse --abbrev-ref HEAD
        OUTPUT_VARIABLE GIT_BRANCH)

    string(STRIP "${GIT_REV}" GIT_REV)
    string(SUBSTRING "${GIT_REV}" 1 7 GIT_REV)
    string(STRIP "${GIT_DIFF}" GIT_DIFF)
    string(STRIP "${GIT_TAG}" GIT_TAG)
    string(STRIP "${GIT_BRANCH}" GIT_BRANCH)
endif()

string(TIMESTAMP TODAY "%Y-%m-%dT%H:%M:%SZ")

MESSAGE(STATUS "REV ${GIT_REV}")
MESSAGE(STATUS "BRANCH ${GIT_BRANCH}")
MESSAGE(STATUS "Date ${TODAY}")

set(VERSION
"#ifndef AUTO_VERSION_HH
#define AUTO_VERSION_HH
#pragma once
// These variables are autogenerated and compiled
// into the library by the version.cmake script
namespace Version{

struct VersionData{
    const char* TAG = \"${GIT_TAG}\";
    const char* REV = \"${GIT_REV}${GIT_DIFF}\";
    const char* BRANCH = \"${GIT_BRANCH}\";
    const char* DATE = \"${TODAY}\";
};

static inline const VersionData version;

}

#endif

")

SET(VERSION_FILE ${CMAKE_CURRENT_SOURCE_DIR}/version.hh)

if(EXISTS ${VERSION_FILE})
    file(READ ${VERSION_FILE} VERSION_)
else()
    set(VERSION_ "")
endif()

if (NOT "${VERSION}" STREQUAL "${VERSION_}")
    file(WRITE ${VERSION_FILE} "${VERSION}")
endif()
